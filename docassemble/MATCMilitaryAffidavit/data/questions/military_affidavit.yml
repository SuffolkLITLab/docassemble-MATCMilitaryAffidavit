---
code: |
  addresses_to_search = [users[0].address]
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "MA"
---
code: |
  github_repo_name =  'docassemble-MilitaryAffidavit'
---
code: |
  interview_short_title = "Tell the court whether any of the people in your case have served in the military"
---
code: |
  al_form_type = "existing_case" 
---
objects:
  - other_parties: ALPeopleList
  - additional_parties: ALPeopleList
  - serving_parties: ALPeopleList
  - unsure_serving_parties: ALPeopleList.using(auto_gather=False, gathered=True)
  - concluded_service_parties: ALPeopleList.using(auto_gather=False, gathered=True)
  - military_affidavit_attachment: ALDocument.using(title="Military Affidavit", filename="military_affidavit", has_addendum=False)
  - military_affidavitr_10_attachment: ALDocument.using(title="Military Affidavit R10", filename="military_affidavitr_10", has_addendum=False)
  - exhibit_attachment: ALExhibitDocument.using(
          title="Exhibits",
          filename="exhibits",
          add_page_numbers=True,
          include_table_of_contents=True,
          include_exhibit_cover_pages=True,
        )
---
sections:
  - review_military_affidavit: Review your answers
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_military_affidavit
code: |
  # Set the allowed courts for this interview
  #form_filled_by_attorney
  user_role
  if user_role == "I am an attorney":
    bbo
  users.gather()
  other_parties.gather()
  additional_parties.gather()
  trial_court
  if trial_court.department == "Housing Court":
    summary_process_check
  set_all_military_statuses
  if any([party.military_status == "past" for party in other_parties + additional_parties]):
    set_concluded_service_dates
  if any([party.military_status == "unknown" for party in other_parties + additional_parties]):
    bond_agreement_i_understand
  review_military_status
  if summary_process_check:
    vacated_status
  if vacated_status:
    set_vacated_status
    vacated_parties
  if summary_process_check:
    use_rent_worksheet
    if use_rent_worksheet:
      monthly_rent
      set_unpaid_rent_month_year
      rent_worksheet
      months_unpaid_total
    unpaid_rent
  if summary_process_check:
    uniform_seen
  # if len(serving_parties) < len(users) + len(other_parties) + len(additional_parties):
  #   ask_concluded_service_parties
  #   if len(concluded_service_parties.elements):
  #     set_concluded_service_dates
  #   for party in concluded_service_parties.elements:
  #     party.service_ended_date
  # if (len(serving_parties) + len(concluded_service_parties)) < len(users) + len(other_parties) + len(additional_parties):
  #   ask_unsure_serving_parties
  # if len(serving_parties) + len(concluded_service_parties) + len(unsure_serving_parties) < len(users) + len(other_parties) + len(additional_parties):
  #   confirm_not_serving_parties
  docket_number
  has_used_scra_site
  if exhibit_attachment.exhibits.has_exhibits:
    exhibit_attachment.exhibits.gather()
  signature_date
  users[0].signature
  military_affidavit_case_name
  interview_order_military_affidavit = True
---
code: |
  concluded_service_parties[i].name.first
  concluded_service_parties[i].service_ended_date
  concluded_service_parties[i].complete = True
---
id: Military_Affidavit
continue button field: military_affidavit_intro
question: |
  Military Affidavit
subquestion: |
  This interview will help you fill out a Military Affidavit,
  which declares whether anybody who is part of this case is
  currently serving in a branch of the U.S. military.

  If someone is in the military, they may have special
  protections under the Servicemembers Civil Relief Act.

  This affidavit has to be filed even if none of the parties are
  in the military right now.

  Use the best information you know. But you must explain either that:

  * you know the military status of each party, or 
  * you searched the [Servicemembers Civil Relief Act website](https://scra.dmdc.osd.mil/)
    to find out their military status
---
id: attorney or pro se (user role)
question: |
  What is your role in this case?
fields: 
- no label: user_role
  input type: radio 
  choices: 
  - "I am an attorney"
  - "I am a self represented (pro se) litigant"
---
id: What is your BBO number
question: |
  What is your BBO number?
fields:
  - "BBO": bbo
    maxlength: 41
---
id: explanation diligent search
question: |
  Before you answer the next questions
subquestion: |
  On the next few screens, we will ask you about the military status 
  of:

  * ${ users }
  % if len(other_parties):
  * ${ other_parties }
  % endif
  % if len(additional_parties):
  * ${ additional_parties }
  % endif
fields:
  - Do you already know the military status of **each** party in this case?: knows_status_already
    datatype: yesnoradio
  - note: |
      If you do not have personal knowledge of each party's military status,
      you **must** search the [Servicemembers Civil Relief Act website](https://scra.dmdc.osd.mil/).

      1. Copy a [link to this interview](${ interview_url() }) to return to it later. You can also 
         leave this window or tab open.
      1. Click the link to visit the [Servicemembers Civil Relief Act website](https://scra.dmdc.osd.mil/)
         and search for the name of the party who you are unsure about.
      1. **Save** a copy of the results as a PDF or take a screenshot that shows the search
         results. You can also print a copy and attach it to this form later.

        You can take a minute to do that now. The website will open in a new tab. When
        you have finished your search and saved the results, close the tab to return to this interview.
    show if: 
      variable: knows_status_already
      is: False
---
variable name: military_status_labels
data:
  - Yes: "yes"
  - No: "no"
  - Past: "past"
  - Unknown: "unknown"
---
continue button field: set_all_military_statuses
id: select all statuses
question: |
  Select the current **military service** of **each** party in this case
subquestion: |
  For each defendant:

  * If they are currently serving active duty in the military, answer "Yes".
  * If they are not serving in the military, answer "No"
  * If they concluded their service, answer "Past"
  * If you are unsure, answer "Unknown"

  ${ collapse_template(explain_military_service)}
fields:
  - code: |
      [
        {
          "field": party.attr_name("military_status"),
          "label": f"{ party.name_full() }",
          "item grid": {
            "width": 3,
            "breakpoint": "sm"
          },
          "datatype": "radio",
          "choices": military_status_labels
        }
        for party in sorted(other_parties + additional_parties)
      ]
---
template: explain_military_service
subject: |
  What is military service?
content: |
  For the purposes of this form, "military service" includes the following:

  1. Members of the armed forces on active duty.

  This refers to individuals serving full time in the Army, Navy, Air Force, Marine Corps, or Coast Guard, including those in the Reserves and National Guard when called to active duty.
  
  2. Members of the National Guard on service under a call to active service for more than 30 consecutive days.

  This includes National Guard members who are called to active duty by the President or the Secretary of Defense for emergencies, wars, or other national defense needs.

  3. Commissioned officers of the Public Health Service or the National Oceanic and Atmospheric Administration (NOAA) on active service.

  These commissioned officers are also considered to be in "military service" when performing their duties.

  Someone who is otherwise in active service but is currently absent because of sickness, injury, leave, or other lawful cause is still considered to be in active military service.
---
id: set all concluded service parties dates
question: |
  When did the military service end?
subquestion: |
  Write the best date that you know for each party. Include a year.  Example: May 2024.
fields:
  - code: |
      [
        {
          "field": party.attr_name("service_ended_date"),
          "label": party.name_full(),
          "under text": "Date service ended"
        }
        for party
        in
        sorted(other_parties + additional_parties)          
        if party.military_status == "past"
      ]
continue button field: set_concluded_service_dates
---
id: ask_use_rent_worksheet
question: |
  Would you like to use the rent worksheet on the form to itemize each month’s rent and payments?
subquestion: |
  If you choose “Yes,” you’ll get a table where you can enter the rent due and amount paid for each month, and we’ll calculate the unpaid total for you.
fields:
  - "Use rent worksheet": use_rent_worksheet
    datatype: yesnoradio
---
id: montly_rent
question: |
  For the rent worksheet:
  please input the amount of the montly rent. If the rent was not the same every month you can change it later/
fields:
  - "Monthly rent amount": monthly_rent
    datatype: currency
---
id: rent_unpaid_month_year_prep
code: |
  import calendar
  from datetime import date
  months_choices = [
    {"label": calendar.month_name[m], "value": m}
    for m in range(1, 13)
  ]
  this_year = date.today().year
  years_choices = [
    {"label": str(y), "value": y}
    for y in range(this_year - 5, this_year + 1)
  ]
---
id: rent_unpaid_month_year
question: |
  For the rent worksheet, select the first and last month rent was not paid.
fields:
  - code: |
      [
        {
          "field": "unpaid_start_month",
          "label": "Start month",
          "datatype": "select",
          "choices": months_choices
        },
        {
          "field": "unpaid_start_year",
          "label": "Start year",
          "datatype": "select",
          "choices": years_choices
        },
        {
          "field": "unpaid_end_month",
          "label": "End month",
          "datatype": "select",
          "choices": months_choices
        },
        {
          "field": "unpaid_end_year",
          "label": "End year",
          "datatype": "select",
          "choices": years_choices
        }
      ]
continue button field: set_unpaid_rent_month_year
---
---
id: set_months_to_calc
code: |
  from datetime import date
  # Cast the dropdown strings to ints (day=1)
  start = date(int(unpaid_start_year), int(unpaid_start_month), 1)
  end   = date(int(unpaid_end_year),   int(unpaid_end_month),   1)
  months_to_calc = []
  current = start
  while current <= end:
      key = current.strftime("%Y_%m")
      label = current.strftime("%B %Y")
      months_to_calc.append((key, label))
      # Advance one month
      if current.month == 12:
          current = current.replace(year=current.year+1, month=1)
      else:
          current = current.replace(month=current.month+1)
continue button field: set_months_to_calc
---
id: rent_worksheet
question: |
  For each month below, you’ll see:

  1. The month name as a heading.  
  2. A “Rent due” box prefilled the amount of rent due each month.
  3. A “Rent paid” box for the amount of rent that was actually received. 
fields:
  - code: |
      [
        field_def
        for key, label in months_to_calc
        for field_def in [
          {
            "note": label,
            "item grid": {"width": 12, "breakpoint": "sm"}
          },
          {
            "field": f"rent_due_{key}",
            "label": "Rent due",
            "datatype": "currency",
            "default": monthly_rent,
            "item grid": {"width": 6, "breakpoint": "sm"}
          },
          {
            "field": f"rent_paid_{key}",
            "label": "Rent paid",
            "datatype": "currency",
            "item grid": {"width": 6, "breakpoint": "sm"}
          }
        ]
      ]
continue button field: rent_worksheet
---
id: rent_info_gather
question: |
  How much rent was paid and how much was not paid?
fields:
  - "unpaid rent": unpaid_rent
    datatype: currency
  - "paid rent": rent_paid
    datatype: currency
  - "when was the last month rent was paid for?": unpaid_rent_date
    datatype: date
---
id: calculate_monthly_unpaid_totals
code: |
  months_unpaid_total = 0
  for i, (key, label) in enumerate(months_to_calc):
      # calculate what’s still owed
      unpaid = monthly_rent - (locals().get(f"rent_paid_{key}", 0) or 0)
      # dynamically set month1, month1_unpaid, month2, month2_unpaid, …
      vars()[f"month{i+1}"] = label
      vars()[f"month{i+1}_unpaid"] = unpaid
      months_unpaid_total += unpaid
  # expose the grand total
  vars()["months_unpaid_total"] = months_unpaid_total
---

id: summary_process_check
question: |
  Is this case a Summary Process (eviction) case?
subquestion: |
  A Summary Process case is the legal term for an eviction case in Massachusetts Housing Court. 
  
  For more information on determining whether your case qualifies as a Summary Process case, please visit: https://www.mass.gov/info-details/overview-of-summary-process-for-tenants.
fields:
  - "Is this a Summary Process (eviction) case": summary_process_check
    datatype: yesnoradio
---
id: R10facts
question: |
  Facts supporting knowledge of service status
fields:
  - "Uniform seen": uniform_seen
    datatype: yesno
  - "Civillian seen": civillian_seen
    datatype: yesno
  - "Defendant acknowledge": defendant_acknowledge
    datatype: yesno
  - "Other facts": other_facts
    datatype: yesno
  - "Other facts text": other_facts_text
    maxlength: 120
    show if: other_facts
---
id: unsure military service
question: |
  Because you are unsure about the military status of some parties
subquestion: |
  If you select "unsure" for any party, the judge may make you pay
  a **bond** to protect the party's rights under the Servicemembers Civil Relief Act,
  before the judge makes the judgment against the party final.

  ${ collapse_template(explain_military_unsure_bond) }
fields:
  - I understand I may have to pay a bond if I am unsure about a party's military status before a judge makes the judgment final: bond_agreement_i_understand
    datatype: yesno
validation code: |
  if not bond_agreement_i_understand:
    validation_error("You must acknowledge that the judge can make you a bond if you are unsure about a party's military status.", field="bond_agreement_i_understand")
---
template: explain_military_unsure_bond
subject: |
  What is the bond for?
content: |
  If you are unsure about the military status of any party in this case, the judge may require you to pay a bond to protect the party's rights under the Servicemembers Civil Relief Act.

  The bond is money that you pay to the court. If the party is in the military, the bond will protect their rights under the Servicemembers Civil Relief Act. 
  If the party is not in the military, the bond will be returned to you.

  The bond is only required if the other party does not show up in court
  and loses "by default".
---
id: confirm serving party status
question: |
  Confirm the military status of each party
subquestion: |
  Here is what you told us about each party:

  ${ all_party_status_review_table }

  ${ action_button_html(url_action('set_all_military_statuses'), label="Edit military service status")}
continue button field: review_military_status
---
table: all_party_status_review_table
rows: other_parties + additional_parties
columns:
  - Name: |
      row_item.name_full()
  # Find the first matching key in the military_status_labels list and show the matching text - this is for translation
  - In active service?: |
      next((k for d in military_status_labels for k, v in d.items() if v == row_item.military_status), "")
---
code: |
  form_filled_by_attorney = bool(len(attorneys))    
---
id: Determine if any of the parties have vacated the premsises
question: |
  Have any of the tenants vacated (moved out) of the property?
  

  "Vacated" means the tenant has permanently left the property and no longer lives there. 
fields:
  - At least one tenant has permanently moved out: vacated_status
    datatype: yesnoradio
---
id: set_vacated_status
question: |
  Tell us whether each defendant has vacated the premises:
subquestion: |
  Select "Vacated" if the person has already left the home.
fields:
  - code: |
      [
        {
          "field": party.attr_name("vacated"),
          "label": party.name_full(),
          "item grid": {
            "width": 6,
            "breakpoint": "sm"
          },
          "datatype": "radio",
          "choices": [
            {"label": "Vacated", "value": True},
            {"label": "Still in premises", "value": False}
          ]
        }
        for party in sorted(other_parties)
      ]
  - "When did someone move out?": vacated_date
    datatype: date
continue button field: set_vacated_status
--- 
code: |
  vacated_parties = [party.name_full() for party in other_parties if getattr(party, "vacated", None) is True]
  parties_vacated = len(vacated_parties) > 0
  premise_occupy = any(getattr(party, "vacated", None) is False for party in other_parties)
---
id: your name
sets:
    - users[0].name.first
    - users[0].name.last
    - users[0].name.middle
    - users[0].name.suffix
question:  |
  % if form_filled_by_attorney:
  What is your client's name?
  % else:
  What is your name?
  % endif
subquestion: |
  If this case is "in the interests of" someone else, enter their name here.

  For example, if this case is for a guardianship or conservatorship, enter
  the name of the person who needs the guardian or conservator.
fields:
  - code: |
      users[0].name_fields()
---
id: has additional parties
question: |
  Is there someone else with an interest in this case?
subquestion: |
  For example, if this is a guardianship or conservatorship case, you may have to list the
  parents or other relatives of the person who needs a guardian as well
  as your own name.
fields:
  - There is someone else with an interest in this case: additional_parties.there_are_any
    datatype: yesnoradio
  - note: |
      We will call this person an **additional party** in the rest of this interview.
    show if: additional_parties.there_are_any
---
id: additional party name 
sets:
  - additional_parties[i].name.first
  - additional_parties[i].name.last
  - additional_parties[i].name.middle
  - additional_parties[i].name.suffix
question: |
  What is the name of the ${ ordinal(i ) } additional party in this case?
subquestion: |
  % if len(additional_parties.complete_elements()) >= 1:
  You have already told us about ${ additional_parties.complete_elements() }.
  % endif
fields:
  - code: |
      additional_parties[i].name_fields()
---
id: supporting the affidavit
question: |
  How do you know the military status of the parties in this case?
fields:
  - "Did you use the Servicemembers Civil Relief Act Website?": has_used_scra_site
    datatype: yesnoradio
  - note: |
      You need to give the court a copy of your search results
    show if: has_used_scra_site
  - Are you ready to attach a copy or screenshot now?: wants_to_attach_search_results
    datatype: yesnoradio
    show if: has_used_scra_site
  - Attach a copy of the search results: used_scra_site_attachment
    datatype: file
    file css class: None
    accept: |
      ".pdf, .png, application/pdf, image/*"
    show if: wants_to_attach_search_results
  - "Explain how you used the website in your search (optional if evidence attached)": used_scra_site_facts
    required: False
    input type: area
    show if: has_used_scra_site
  - Explain how you know: not_used_scra_site_facts
    input type: area
    show if:
      variable: has_used_scra_site
      is: False
    help: |
      For example: I know the party personally.
---
code: |
  signature_fields = ['users[0].signature']

---
id: military affidavit review screen
# event: review_military_affidavit
question: |
  Review your answers
review:
  - Edit: trial_court
    button: |
      **Trial court**
  
      % if defined("trial_court.department"):
      * department: ${ trial_court.department }
      % endif
      % if defined("trial_court.division"):
      * division: ${ trial_court.division }
      % endif
  - Edit: users.revisit
    button: |
      **People on your side of the case**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: other_parties.revisit
    button: |
      **People on the other side of the case**

      % for item in other_parties:
        * ${ item }
      % endfor
  - Edit: additional_parties.revisit
    button: |
      **Other people with an interest in this case**

      % for item in additional_parties:
        * ${ item }
      % endfor
  - Edit: exhibit_attachment.exhibits.has_exhibits
    button: |
      **Are the exhibits attached?**
      
      % if exhibit_attachment.exhibits.has_exhibits:
      Yes
      % elif not exhibit_attachment.exhibits.has_exhibits:
      No
      % endif
  - note: |
      **Supporting exhibits**:
      
      % if exhibit_attachment.exhibits.there_are_any:
      ${ exhibit_attachment.exhibits.in_progress_exhibits }
      % else:
      You have not attached any exhibits yet.
      % endif

      ${ exhibit_attachment.exhibits.add_action() }
    css class: bg-secondary-subtle
    show if: exhibit_attachment.exhibits.has_exhibits
  - Edit: docket_number.revisit
    button: |
      **Docket numbers**

      % for item in docket_number:
        * ${ item }
      % endfor
  - note: |
      **Military status of parties**

      Here is what you told us:

      % if len(serving_parties):
      % if len(serving_parties) == 1:
      * You know that ${ serving_parties } is currently serving in the military.
      % else:
      * You know that ${ serving_parties } are currently serving in the military.
      % endif
      % endif
      % if len(concluded_service_parties):
      * You know that ${ concluded_service_parties } served in the military in the past.
      % endif
      % if len(unsure_serving_parties):
      * You do not know whether ${ unsure_serving_parties } served in the military.
      % endif

      % if len(( users.union(other_parties + additional_parties).difference(serving_parties + concluded_service_parties + unsure_serving_parties))):
      That means that you know the following parties are **not** serving in the military:

      * ${ comma_and_list( users.union(other_parties + additional_parties).difference(serving_parties + concluded_service_parties + unsure_serving_parties)) }
      % endif

      If this is not correct, edit your responses by clicking the button below.

      * ${ action_button_html(url_action('serving_parties'), label="Edit parties currently serving in the military")}
      * ${ action_button_html(url_action('concluded_service_parties'), label="Edit parties whose service ended")}
      * ${ action_button_html(url_action('unsure_serving_parties'), label="Edit parties you do not know about")}

  - Edit: signature_date
    button: |
      **Date of signature**:
      ${ signature_date }
  - Edit: bbo
    button: |
      **BBO number (if you are an attorney)**:
      ${ bbo }
---
id: revisit exhibit_attachment
continue button field: exhibit_attachment.revisit
question: |
  Edit your supporting exhibits
subquestion: |
  ${ exhibit_attachment.exhibits.rearrange_exhibits_table }

  ${ exhibit_attachment.add_action() }
---
continue button field: plaintiffs.revisit
question: |
  Edit plaintiffs
subquestion: |
  ${ plaintiffs.table }

  ${ plaintiffs.add_action() }
---
table: plaintiffs.table
rows: plaintiffs
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True

---
continue button field: defendants.revisit
question: |
  Edit defendants
subquestion: |
  ${ defendants.table }

  ${ defendants.add_action() }
---
table: defendants.table
rows: defendants
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True
---
continue button field: docket_number.revisit
question: |
  Edit docket_number
subquestion: |
  ${ docket_number.table }

  ${ docket_number.add_action() }
---
table: docket_number.table
rows: docket_number
columns:
  - Name: |
      row_item
edit: True
confirm: True

---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
edit:
  - name.first
  - signature
confirm: True

---
# ALDocument objects specify the metadata for each template
objects:
  - military_affidavit_attachment: ALDocument.using(title="Military Affidavit", filename="military_affidavit", has_addendum=False, )
  - military_affidavit_search_results: ALDocumentUpload.using(title="Search results from SCRA website", filename="military_affidavit_search_results", has_addendum=False, )
---
objects:
  - military_affidavit_bundle: ALDocumentBundle.using(elements=[military_affidavit_attachment, military_affidavit_search_results], filename="military_affidavit", title="Military Affidavit", enabled=True)
---
code: |
  military_affidavit_search_results.enabled = has_used_scra_site and wants_to_attach_search_results
---
code: |
  military_affidavit_attachment.enabled = True
---
code: |
  # This is available to customize in other forms with more complex case name scenarios
  # Leave it undefined to use the default case name of petitioner v respondent or In the interests of respondent
  military_affidavit_case_name = ""
---
---
code: |
  if summary_process_check:
      military_affidavitr_10_attachment.enabled = True
      military_affidavit_attachment.enabled = False
      al_user_bundle.elements = [military_affidavitr_10_attachment]
      al_court_bundle.elements = [military_affidavitr_10_attachment]
  else:
      military_affidavitr_10_attachment.enabled = False
      military_affidavit_attachment.enabled = True
      al_user_bundle.elements = [military_affidavit_attachment]
      al_court_bundle.elements = [military_affidavit_attachment]

---
attachment:
  name: military affidavitr 10
  filename: military_affidavitr_10
  variable name: military_affidavitr_10_attachment[i]
  skip undefined: True
  pdf template file: military_affidavitr_10.pdf
  enabled: False
  fields:
      - "docket_number__1": ${ docket_number }
      - "docket_number__2": ${ docket_number }
      - "trial_court_division__1": ${ trial_court.division }
      - "trial_court_division__2": ${ trial_court.division }
      - "petitioners": |
          % if showifdef("military_affidavit_case_name"):
          ${ military_affidavit_case_name }
          % else:
            % if user_ask_role == "plaintiff":
            % if len(other_parties):
          ${ users }
            % else:
          In the interests of ${ users }
            % endif
            % else:
          ${ other_parties }
            % endif
          % endif
      - "respondents": |
          % if user_ask_role == "defendant":
          ${ users }
          % else:
          ${ other_parties }
          % endif
      - "users1_name_full__1": ${ users[0] }
      - "not_service": ${ not_service }
      - "in_service": ${ in_service }
      - "serving_parties": ${ serving_parties }
      - "unable_service": ${ unable_service }
      - "unsure_serving_parties": ${ unsure_serving_parties }
      - "uniform_seen": ${ uniform_seen }
      - "civillian_seen": ${ civillian_seen }
      - "defendant_acknowledge": ${ defendant_acknowledge }
      - "other_facts": ${ other_facts }
      - "other_facts_text": ${ other_facts_text }
      - "rent_paid": ${ rent_paid }
      - "unpaid_rent": ${ unpaid_rent }
      - "unpaid_rent_date": ${ unpaid_rent_date.format() }
      - "premise_occupy": ${ premise_occupy }
      - "vacated_date": ${ vacated_date.format() }
      - "parties_vacated": ${ parties_vacated }
      - "vacated_parties": ${ comma_and_list(vacated_parties) }
      - "bbo_number": ${ bbo_number }
      - "users1_full_name__2": ${ users[0].name.full() }
      - "signature_date": ${ signature_date }
      - "users1_signature": ${ users[0].signature_if_final(i) }
      - "month1_unpaid": ${ month1_unpaid }
      - "month1": ${ month1 }
      - "month2_unpaid": ${ month2_unpaid }
      - "month2": ${ month2 }
      - "month3_unpaid": ${ month3_unpaid }
      - "month3": ${ month3 }
      - "month4_unpaid": ${ month4_unpaid }
      - "month4": ${ month4 }
      - "month5_unpaid": ${ month5_unpaid }
      - "month5": ${ month5 }
      - "month6_unpaid": ${ month6_unpaid }
      - "month6": ${ month6 }
      - "month7": ${ month7 }
      - "month7_unpaid": ${ month7_unpaid }
      - "month8": ${ month8 }
      - "month8_unpaid": ${ month8_unpaid }
      - "month9": ${ month9 }
      - "month9_unpaid": ${ month9_unpaid }
      - "month10": ${ month10 }
      - "month10_unpaid": ${ month10_unpaid }
      - "month11": ${ month11 }
      - "month11_unpaid": ${ month11_unpaid }
      - "month12_unpaid": ${ month12_unpaid }
      - "month12": ${ month12 }
      - "month13": ${ month13 }
      - "month13_unpaid": ${ month13_unpaid }
      - "month14": ${ month14 }
      - "month14_unpaid": ${ month14_unpaid }
      - "month15_unpaid": ${ month15_unpaid }
      - "month15": ${ month15 }
      - "month16_unpaid": ${ month16_unpaid }
      - "month16": ${ month16 }
      - "month17": ${ month17 }
      - "month17_unpaid": ${ month17_unpaid }
      - "month18": ${ month18 }
      - "month18_unpaid": ${ month18_unpaid }
      - "month19_unpaid": ${ month19_unpaid }
      - "month19": ${ month19 }
      - "month20": ${ month20 }
      - "month20_unpaid": ${ month20_unpaid }
      - "month21": ${ month21 }
      - "month21_unpaid": ${ month21_unpaid }
      - "month22": ${ month22 }
      - "month22_unpaid": ${ month22_unpaid }
      - "month23": ${ month23 }
      - "month23_unpaid": ${ month23_unpaid }
      - "month24": ${ month24 }
      - "month24_unpaid": ${ month24_unpaid }
      - "months_total": ${ months_total }
      - "months_unpaid_total": ${ months_unpaid_total }
---
need:
  - military_affidavit_case_name
attachment:
  name: military affidavit
  filename: military_affidavit
  variable name: military_affidavit_attachment[i]
  skip undefined: True
  pdf template file: military_affidavit.pdf
  # editable: False
  fields:
      - "docket_number": ${ docket_number }      
      - "court_department_district": ${trial_court.department == "District Court"}
      - "court_department_bmc": ${trial_court.department == "Boston Municipal Court"}
      - "court_department_housing": ${trial_court.department == "Housing Court"}
      - "court_department_juvenile": ${trial_court.department == "Juvenile Court"}
      - "court_department_land": ${trial_court.department == "Land Court"}
      - "court_department_probate_family": ${trial_court.department == "Probate and Family Court"}
      - "court_department_superior": ${trial_court.department == "Superior Court"}
      - "trial_court_division": ${ trial_court.division }
      - "petitioners": |
          % if showifdef("military_affidavit_case_name"):
          ${ military_affidavit_case_name }
          % else:
            % if user_ask_role == "plaintiff":
            % if len(other_parties):
          ${ users }
            % else:
          In the interests of ${ users }
            % endif
            % else:
          ${ other_parties }
            % endif
          % endif
      - "respondents": |
          % if user_ask_role == "defendant":
          ${ users }
          % else:
          ${ other_parties }
          % endif
      - "users1_name_full__1": |
          ${ users[0] }
      - "date_signed__1": ${ today() }
      - "has_serving_parties": ${ any([party.military_status == "yes" for party in users.union(other_parties + additional_parties)]) }
      - "serving_parties": ${ comma_and_list([party.name_full() for party in users.union(other_parties + additional_parties) if party.military_status == "yes"]) }
      - "has_not_serving_parties": ${ any([party.military_status == "no" for party in users.union(other_parties + additional_parties)]) }
      - "not_serving_parties": ${ comma_and_list( [party.name_full() for party in users.union(other_parties + additional_parties) if party.military_status == "no"] ) }
      - "has_concluded_service_parties": ${ any([party.military_status == "past" for party in users.union(other_parties + additional_parties)]) }
      - "concluded_service_parties_date": |
          ${ comma_and_list([f"{party.name_full()}: {party.service_ended_date}" for party in users.union(other_parties + additional_parties) if party.military_status == "past"]) }
      - "has_unsure_serving_parties": ${ any([party.military_status == "unknown" for party in users.union(other_parties + additional_parties)]) }
      - "unsure_serving_parties": ${ comma_and_list([party.name_full() for party in users.union(other_parties + additional_parties) if party.military_status == "unknown"]) }
      - "has_used_scra_site": ${ has_used_scra_site }
      - "used_scra_site_facts": |
          % if has_used_scra_site:
          ${ used_scra_site_facts }
          % endif
      - "has_not_used_scra_site": ${not has_used_scra_site}
      - "not_used_scra_site_facts": |
          % if not has_used_scra_site:
          ${not_used_scra_site_facts }
          % endif
      - "users1_signature": |
          ${ users[0].signature_if_final(i) }
      - "date_signed__2": ${ today() }
      - "users1_name_full__2": ${users[0]}
      - "users1_address_on_one_line": ${users[0].address.on_one_line()}
      - "users1_phone": ${users[0].phone_numbers() }
      - "user_bbo": ${bbo}
      - "users1_email": ${users[0].email}
---
code: |
  military_affidavit_bundle.enabled = True